// Copyright (C) 2023 Intel Corporation
// SPDX-License-Identifier: MIT
#pragma once

#ifndef PRESENTMONPROVIDER_ASSERT
#define PRESENTMONPROVIDER_ASSERT assert
#endif

// Before emitting any Intel-PresentMon events, the provider needs to be initialized by calling
// PresentMonProvider_Initialize().  PresentMonProvider_Initialize() returns a context to use for
// other PresentMonPrivider calls, or nullptr if the initialization failed.
//
// Call PresentMonProvider_ShutDown() when you no longer need to generate any Intel-PresentMon
// events.  ctxt is deallocated during ShutDown() and can no longer be used.

struct PresentMonProvider;
PresentMonProvider* PresentMonProvider_Initialize();

void PresentMonProvider_ShutDown(PresentMonProvider* ctxt);


// Once you successfully initialize the provider, you can generate below events.
//
// Event function arguments are checked with PRESENTMONPROVIDER_ASSERT().  Each function will return
// one of the following status values:
//
//     - ERROR_SUCCESS:             The event was written successfully.
//
//     - ERROR_INVALID_HANDLE:      PresentMonProvider_Initialize() was not called or was not
//                                  successful.
//
//     - ERROR_MORE_DATA:           The ETW session buffer size is too small for the event.
//
//     - ERROR_NOT_ENOUGH_MEMORY:   Can occur when the disk IO cannot keep up with the amount of 
//                                  events being generated.
//
//     - Other return values may be returned in the event of a PresentMonProvider internal error.


// PRESENTING GENERATED FRAMES
//
// Drivers or SDKs that present generated frames other than the application-rendered frames should
// emit these events to ensure PresentMon can properly track them.
//
// For generated frames that are submitted through a standard present API, emit the
// 'PresentGeneratedFrame' event immediately before calling Present() for the generated frame, on
// the same thread as the Present() call.  You do not need to emit a 'FlipGeneratedFrame' event in
// this case as the flip will be detected using standard events.
//
// For generated frames that are submitted through a proprietary mechanism, emit the
// 'FlipGeneratedFrame' event as close to the flip time as possible.  sourcePresentID should be the
// ID of the previous app-rendered frame, and be the same ID used by MMIOFlipMultiPlaneOverlay3.

enum PresentMonProvider_FrameType {
    PresentMonProvider_FrameType_Unspecified,       // Use when no other values are appropriate (file github request
                                                    // to have your technique added).
    PresentMonProvider_FrameType_Original,          // The original frame rendered by the application.
    PresentMonProvider_FrameType_Repeated,          // The frame rendered by the application is being repeated.
    PresentMonProvider_FrameType_Intel_XEFG = 50,   // Frame generated by Intel Xe Frame Generation.
    PresentMonProvider_FrameType_AMD_AFMF = 100,    // Frame generated by AMD Fluid Motion Frames.
};

enum PresentMonProvider_PresentIDType {
    PresentMonProvider_PresentID_MMIOFlipMultiPlaneOverlay3,
};

ULONG PresentMonProvider_FlipFrameType(PresentMonProvider* ctxt,
                                       uint32_t vidPnSourceId,
                                       uint32_t layerIndex,
                                       uint64_t presentId,
                                       PresentMonProvider_FrameType frameType);

// MEASURED INPUT/PHOTON LATENCY
//
// These provide times associated with user input and monitor updates that were measured using some
// external method which can be used to include hardware latency within the input and display
// devices as part of PresentMon's latency calculations.
//
// Try to call PresentMonProvider_Measured*() as quickly as possible after the measurment is
// available.  If PresentMon doesn't observe the measured data after waiting for some period, it may
// flush out it's SW-measured values instead.
//
// Input/display times are provided as QueryPerformanceCounter (QPC) values.  Special care must be
// taken to correlate the measurement device's measured time with the PC's QPC as closely as
// possible.

enum PresentMonProvider_InputType {
    PresentMonProvider_Input_NotSpecified   = 0,
    PresentMonProvider_Input_MouseClick     = 1 << 0,
    PresentMonProvider_Input_KeyboardClick  = 1 << 1,
};

// GRAPHICS APPLICATION FRAME INFORMATION

ULONG PresentMonProvider_Application_SleepStart(PresentMonProvider* ctxt, uint32_t frame_id);
ULONG PresentMonProvider_Application_SleepEnd(PresentMonProvider* ctxt, uint32_t frame_id);
ULONG PresentMonProvider_Application_SimulationStart(PresentMonProvider* ctxt, uint32_t frame_id);
ULONG PresentMonProvider_Application_SimulationEnd(PresentMonProvider* ctxt, uint32_t frame_id);
ULONG PresentMonProvider_Application_RenderSubmitStart(PresentMonProvider* ctxt, uint32_t frame_id);
ULONG PresentMonProvider_Application_RenderSubmitEnd(PresentMonProvider* ctxt, uint32_t frame_id);
ULONG PresentMonProvider_Application_PresentStart(PresentMonProvider* ctxt, uint32_t frame_id);
ULONG PresentMonProvider_Application_PresentEnd(PresentMonProvider* ctxt, uint32_t frame_id);


ULONG PresentMonProvider_Application_InputSample(PresentMonProvider* ctxt,
                                                   PresentMonProvider_InputType inputType, uint32_t frame_id);

